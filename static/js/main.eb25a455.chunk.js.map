{"version":3,"sources":["Nav.js","Item.js","ItemPage.js","CartPage.js","static-data.js","App.js","serviceWorker.js","index.js"],"names":["Nav","activeTab","onTabChange","className","onClick","Item","item","children","name","description","price","ItemPage","items","onAddToCart","map","key","id","CartPage","onAddOne","onRemoveOne","count","App","useState","setActiveTab","cart","updateCart","handleAddToCart","handleRemoveOne","index","indexOf","slice","renderCart","itemCounts","reduce","itemId","cartItems","Object","keys","find","parseInt","renderContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb25a455.chunk.js","sourcesContent":["import React from 'react';\r\nconst Nav = ({ activeTab, onTabChange }) => (\r\n    <nav className=\"App-nav\">\r\n        <ul>\r\n            <li className={`App-nav-item ${activeTab === 0 && 'selected'}`}><a onClick={() => onTabChange(0)}>Items</a></li>\r\n            <li className={`App-nav-item ${activeTab === 1 && 'selected'}`}><a onClick={() => onTabChange(1)}>Cart</a></li>\r\n        </ul>\r\n    </nav>\r\n);\r\nexport default Nav;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Item.css';\r\n\r\nconst Item = ({ item, children }) => (\r\n    <div className=\"Item\">\r\n        <div className=\"Item-left\">\r\n            <div className=\"Item-image\" />\r\n            <div className=\"Item-title\">{item.name}</div>\r\n            <div className=\"Item-description\">{item.description}</div>\r\n        </div>\r\n        <div className=\"Item-right\">\r\n            <div className=\"Item-price\">${item.price}</div> {children}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nItem.propTypes = {\r\n    item: PropTypes.object.isRequired,\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default Item;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Item from './Item';\r\nimport './ItemPage.css';\r\n\r\nconst ItemPage = ({ items, onAddToCart }) => {\r\n    return (\r\n        <ul className=\"ItemPage-items\">\r\n            {items.map(item =>\r\n                <li key={item.id} className=\"ItemPage-item\">\r\n                    <Item item={item}>\r\n                        <button className=\"Item-addToCart\" onClick={() => onAddToCart(item)}> Add to Cart</button>\r\n                    </Item>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    );\r\n}\r\nItemPage.propTypes = {\r\n    items: PropTypes.array.isRequired, onAddToCart: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ItemPage;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Item from './Item';\r\nimport './CartPage.css';\r\n\r\nconst CartPage = ({ items, onAddOne, onRemoveOne }) => {\r\n    return (\r\n        <ul className=\"CartPage-items\">\r\n            {items.map(item =>\r\n                <li key={item.id} className=\"CartPage-item\">\r\n                <Item item={item}>\r\n                    <div className=\"CartItem-controls\">\r\n                    <button className=\"CartItem-removeOne\" onClick={() => onRemoveOne(item)}>&ndash;</button> <span className=\"CartItem-count\">{item.count}</span>\r\n                    <button className=\"CartItem-addOne\" onClick={() => onAddOne(item)}>+</button> </div>\r\n                </Item>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    );\r\n}\r\n\r\nCartPage.propTypes = {\r\n    items: PropTypes.array.isRequired,\r\n    onAddOne: PropTypes.func.isRequired, onRemoveOne: PropTypes.func.isRequired\r\n};\r\nexport default CartPage;","let items = [\r\n    {\r\n      id: 0,\r\n      name: 'Apple iPad',\r\n      description:\r\n        'An iPad like no other. WiFi, 4G, lots of storage.',\r\n      price: 329.0\r\n    },\r\n    {\r\n      id: 1,\r\n      name: 'Apple iPad Pro',\r\n      description:\r\n        'Even more expensive than the regular iPad.',\r\n      price: 799.0\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Canon T7i',\r\n      description:\r\n        'DSLR camera with lots of megapixels.',\r\n      price: 749.99\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Apple Watch Sport',\r\n      description: 'A watch',\r\n      price: 249.99\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Apple Watch Silver',\r\n      description: 'A more expensive watch',\r\n      price: 599.99\r\n    }\r\n  ];\r\n  export { items };","import React, { useState } from 'react';\nimport Nav from './Nav';\nimport './App.css';\nimport ItemPage from './ItemPage';\nimport CartPage from './CartPage';\nimport { items } from './static-data';\n\nconst App = () => {\n\n  const [activeTab, setActiveTab] = useState(0);\n  const [cart, updateCart] = useState([]);\n\n  const handleTabChange = index => {\n    setActiveTab(index);\n  }\n\n  const handleAddToCart = item => {\n    updateCart([...cart, item.id])\n  }\n\n  const handleRemoveOne = (item) => {\n    let index = cart.indexOf(item.id);\n    updateCart([\n      ...cart.slice(0, index),\n      ...cart.slice(index + 1)\n    ]\n    );\n  }\n  const renderContent = () => {\n    switch (activeTab) {\n      case 0: return (\n        <ItemPage items={items} onAddToCart={handleAddToCart} />\n      );\n      case 1: return renderCart();\n      default: return null;\n    }\n  }\n\n  const renderCart = () => {\n    // Count how many of each item is in the cart\n    let itemCounts = cart.reduce((itemCounts, itemId) => {\n      itemCounts[itemId] = itemCounts[itemId] || 0;\n      itemCounts[itemId]++;\n      return itemCounts;\n    }, {});\n\n    // Create an array of items\n    let cartItems = Object.keys(itemCounts).map(itemId => {\n      // Find the item by its id\n      let item = items.find(item => item.id === parseInt(itemId, 10)\n      );\n\n      // Create a new \"item\" and add the 'count' property\n      return { ...item, count: itemCounts[itemId] }\n    });\n\n    return (\n      <CartPage items={cartItems} onAddOne={handleAddToCart} onRemoveOne={handleRemoveOne} />\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav activeTab={activeTab} onTabChange={handleTabChange} />\n      <main className=\"App-content\">\n        {renderContent()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}